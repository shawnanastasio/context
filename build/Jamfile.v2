
# Boost.Context Library Build Jamfile

#          Copyright Oliver Kowalke 2009.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

import common ;
import feature ;
import indirect ;
import modules ;
import os ;
import toolset ;
 import ../../config/checks/config : requires ;

feature.feature segmented-stacks : on : optional propagated composite ;
feature.compose <segmented-stacks>on : <define>BOOST_USE_SEGMENTED_STACKS ;

feature.feature htm : tsx : optional propagated composite ;
feature.compose <htm>tsx : <define>BOOST_USE_TSX ;

feature.feature valgrind : on : optional propagated composite ;
feature.compose <valgrind>on : <define>BOOST_USE_VALGRIND ;

project boost/context
    : requirements
      <target-os>windows:<define>_WIN32_WINNT=0x0601
      <toolset>gcc,<segmented-stacks>on:<cxxflags>-fsplit-stack
      <toolset>gcc,<segmented-stacks>on:<cxxflags>-DBOOST_USE_SEGMENTED_STACKS
      <toolset>gcc,<segmented-stacks>on:<linkflags>"-static-libgcc"
      <toolset>clang,<segmented-stacks>on:<cxxflags>-fsplit-stack
      <toolset>clang,<segmented-stacks>on:<cxxflags>-DBOOST_USE_SEGMENTED_STACKS
      <toolset>clang,<segmented-stacks>on:<linkflags>"-static-libgcc"
      <toolset>intel,<link>shared:<define>BOOST_CONTEXT_EXPORT=EXPORT
      <toolset>intel,<link>static:<define>BOOST_CONTEXT_EXPORT=
      <toolset>msvc,<link>shared:<define>BOOST_CONTEXT_EXPORT=EXPORT
      <toolset>msvc,<link>static:<define>BOOST_CONTEXT_EXPORT=
      <toolset>clang-win,<link>shared:<define>BOOST_CONTEXT_EXPORT=EXPORT
      <toolset>clang-win,<link>static:<define>BOOST_CONTEXT_EXPORT=
      <link>shared:<define>BOOST_CONTEXT_DYN_LINK=1
      <linkflags>"-lunwind"
      <define>BOOST_CONTEXT_SOURCE
      <threading>multi
    : usage-requirements
      <link>shared:<define>BOOST_CONTEXT_DYN_LINK=1
      <linkflags>"-lunwind"
      <optimization>speed:<define>BOOST_DISABLE_ASSERTS
      <variant>release:<define>BOOST_DISABLE_ASSERTS
    : source-location ../src
    ;


local rule default_binary_format ( )
{
    local tmp = elf ;
    return $(tmp) ;
}

feature.feature binary-format
   : elf
   : propagated
   ;
feature.set-default binary-format : [ default_binary_format ] ;


local rule default_abi ( )
{
    local tmp = sysv ;
    return $(tmp) ;
}

feature.feature abi
   : sysv
   : propagated
   ;
feature.set-default abi : [ default_abi ] ;


feature.feature context-impl
    : fcontext
    : propagated
      composite
    ;
feature.set-default context-impl : fcontext ;


# X86_64
# X86_64/SYSV/ELF
alias asm_sources
   : asm/make_x86_64_sysv_elf_gas.S
     asm/jump_x86_64_sysv_elf_gas.S
     asm/ontop_x86_64_sysv_elf_gas.S
   : <abi>sysv
     <address-model>64
     <architecture>x86
     <binary-format>elf
     <toolset>gcc
   ;

explicit asm_sources ;


# fcontext_t
alias impl_sources
    : asm_sources
    : <context-impl>fcontext
    ;

explicit impl_sources ;

obj cxx11_hdr_mutex_check : ../build/cxx11_hdr_mutex.cpp ;
explicit cxx11_hdr_mutex_check ;
local cxx11_mutex = [ check-target-builds
      cxx11_hdr_mutex_check "C++11 mutex"
    :
    : <library>/boost/thread//boost_thread
  ] ;

alias stack_traits_sources
    : posix/stack_traits.cpp
    :
    :
    : $(cxx11_mutex)
    ;

explicit stack_traits_sources ;

lib boost_context
   : impl_sources
     execution_context.cpp
     stack_traits_sources
   ;

boost-install boost_context ;
